module Common

lexical syntax

  SID            = [a-z][a-zA-Z0-9\_]*
  BID            = [A-Z][a-zA-Z0-9\_]*
  PID            = [a-zA-Z][a-zA-Z0-9\_\-]*
  INT            = "-"? [0-9]+ 
  STRING         = "\"" StringChar* "\"" 
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar   
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

  SID            = "new" | "if" | "then" | "else"
                 | "fun" | "with" | "do" | "module"
                 | "import" | "extends" | "def" | "fix" 
                 | "record" | "let" | "letrec" | "letpar"
                 | "in" | "true" | "false" {reject}
  BID            = "Int" | "Bool" {reject}

lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar   -/- [\/]
  INT           -/- [0-9]
  SID           -/- [a-zA-Z0-9\_]
  BID           -/- [a-zA-Z0-9\_]
 
  // EOF may not be followed by any char
  
  EOF           -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]

